{
  
    
        "post0": {
            "title": "Python Basics for Data Science",
            "content": "Recursion . In python , a function can call other functions.It is also possible for function to call itself . This is called recursion . Example 1 : . # print factorial of a function using recursion def factorial(n): &#39;&#39;&#39; recursive function to find factorial of a number &#39;&#39;&#39; return 1 if n==1 else (n*factorial(n-1)) . factorial(5) . 120 . Advantages . Recursive function make the code look clean and elegant | Complex task can be broken down into simpler sub-problems | sequence generation is easier with recursion than nested iteration | Disadvantages . Takes up more memory and time | Hard to debug | Logic can be harder sometimes | Example 2 : . ## Generate fibonacci sequence def fibonacci(num): &#39;&#39;&#39; recursive function to print fibonacci sequence &#39;&#39;&#39; return num if num&lt;=1 else fibonacci(num-1)+fibonacci(num-2) . fibonacci(0) . 0 . fibonacci(1) . 1 . fibonacci(3) . 2 . fibonacci(4) . 3 . fibonacci(5) . 5 . # 1st 10 fibonacci sequence for i in range(0,11): print(fibonacci(i)) . 0 1 1 2 3 5 8 13 21 34 55 . Lambda functions . Anonymous functions defined using lambda keyword . double = lambda x: x*2 #double is function name print(double(3)) . 6 . ## example with filter() lst = [1,2,3,4,5] even_lst = list(filter(lambda x: (x%2==0), lst)) ## input to the filter has a lambda function . ## Example with map() ## python map() function takes a function and a iterable(e.g list) as a parameter and performs the function on each element of the array lst = [1,2,3,4,5] new_list = list(map(lambda x: x**2,lst)) ## square each element of the list using lambda function . new_list . [1, 4, 9, 16, 25] . ## example with reduce() from functools import reduce lst = [1,2,3,4,5] product_list = reduce(lambda x,y:x*y, lst) . product_list . 120 . dir() helps to list the names of the functions that are defined within the module . Python built-in Exceptions . dir(__builtins__) . [&#39;ArithmeticError&#39;, &#39;AssertionError&#39;, &#39;AttributeError&#39;, &#39;BaseException&#39;, &#39;BlockingIOError&#39;, &#39;BrokenPipeError&#39;, &#39;BufferError&#39;, &#39;BytesWarning&#39;, &#39;ChildProcessError&#39;, &#39;ConnectionAbortedError&#39;, &#39;ConnectionError&#39;, &#39;ConnectionRefusedError&#39;, &#39;ConnectionResetError&#39;, &#39;DeprecationWarning&#39;, &#39;EOFError&#39;, &#39;Ellipsis&#39;, &#39;EnvironmentError&#39;, &#39;Exception&#39;, &#39;False&#39;, &#39;FileExistsError&#39;, &#39;FileNotFoundError&#39;, &#39;FloatingPointError&#39;, &#39;FutureWarning&#39;, &#39;GeneratorExit&#39;, &#39;IOError&#39;, &#39;ImportError&#39;, &#39;ImportWarning&#39;, &#39;IndentationError&#39;, &#39;IndexError&#39;, &#39;InterruptedError&#39;, &#39;IsADirectoryError&#39;, &#39;KeyError&#39;, &#39;KeyboardInterrupt&#39;, &#39;LookupError&#39;, &#39;MemoryError&#39;, &#39;ModuleNotFoundError&#39;, &#39;NameError&#39;, &#39;None&#39;, &#39;NotADirectoryError&#39;, &#39;NotImplemented&#39;, &#39;NotImplementedError&#39;, &#39;OSError&#39;, &#39;OverflowError&#39;, &#39;PendingDeprecationWarning&#39;, &#39;PermissionError&#39;, &#39;ProcessLookupError&#39;, &#39;RecursionError&#39;, &#39;ReferenceError&#39;, &#39;ResourceWarning&#39;, &#39;RuntimeError&#39;, &#39;RuntimeWarning&#39;, &#39;StopAsyncIteration&#39;, &#39;StopIteration&#39;, &#39;SyntaxError&#39;, &#39;SyntaxWarning&#39;, &#39;SystemError&#39;, &#39;SystemExit&#39;, &#39;TabError&#39;, &#39;TimeoutError&#39;, &#39;True&#39;, &#39;TypeError&#39;, &#39;UnboundLocalError&#39;, &#39;UnicodeDecodeError&#39;, &#39;UnicodeEncodeError&#39;, &#39;UnicodeError&#39;, &#39;UnicodeTranslateError&#39;, &#39;UnicodeWarning&#39;, &#39;UserWarning&#39;, &#39;ValueError&#39;, &#39;Warning&#39;, &#39;ZeroDivisionError&#39;, &#39;__IPYTHON__&#39;, &#39;__build_class__&#39;, &#39;__debug__&#39;, &#39;__doc__&#39;, &#39;__import__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;abs&#39;, &#39;all&#39;, &#39;any&#39;, &#39;ascii&#39;, &#39;bin&#39;, &#39;bool&#39;, &#39;breakpoint&#39;, &#39;bytearray&#39;, &#39;bytes&#39;, &#39;callable&#39;, &#39;chr&#39;, &#39;classmethod&#39;, &#39;compile&#39;, &#39;complex&#39;, &#39;copyright&#39;, &#39;credits&#39;, &#39;delattr&#39;, &#39;dict&#39;, &#39;dir&#39;, &#39;display&#39;, &#39;divmod&#39;, &#39;enumerate&#39;, &#39;eval&#39;, &#39;exec&#39;, &#39;filter&#39;, &#39;float&#39;, &#39;format&#39;, &#39;frozenset&#39;, &#39;get_ipython&#39;, &#39;getattr&#39;, &#39;globals&#39;, &#39;hasattr&#39;, &#39;hash&#39;, &#39;help&#39;, &#39;hex&#39;, &#39;id&#39;, &#39;input&#39;, &#39;int&#39;, &#39;isinstance&#39;, &#39;issubclass&#39;, &#39;iter&#39;, &#39;len&#39;, &#39;license&#39;, &#39;list&#39;, &#39;locals&#39;, &#39;map&#39;, &#39;max&#39;, &#39;memoryview&#39;, &#39;min&#39;, &#39;next&#39;, &#39;object&#39;, &#39;oct&#39;, &#39;open&#39;, &#39;ord&#39;, &#39;pow&#39;, &#39;print&#39;, &#39;property&#39;, &#39;range&#39;, &#39;repr&#39;, &#39;reversed&#39;, &#39;round&#39;, &#39;set&#39;, &#39;setattr&#39;, &#39;slice&#39;, &#39;sorted&#39;, &#39;staticmethod&#39;, &#39;str&#39;, &#39;sum&#39;, &#39;super&#39;, &#39;tuple&#39;, &#39;type&#39;, &#39;vars&#39;, &#39;zip&#39;] . Errors are handled gracefully in except block . import sys lst = [&#39;b&#39;,0,2] for entry in lst: try: print(&quot;The entry is &quot;,entry) r = 1/int(entry) except: print(&quot;oops!&quot;, sys.exc_info()[0], &quot; occured.&quot;) print(&quot;***********&quot;) print(f&quot;the reciprocal of {entry} is {r}&quot;) . The entry is b oops! &lt;class &#39;ValueError&#39;&gt; occured. *********** The entry is 0 oops! &lt;class &#39;ZeroDivisionError&#39;&gt; occured. *********** The entry is 2 the reciprocal of 2 is 0.5 . lst = [&#39;b&#39;,0,2] for entry in lst: try: print(&quot;The entry is &quot;,entry) r = 1/int(entry) except Exception as e: print(&quot;oops!&quot;,e, &quot; occured.&quot;) print(&quot;***********&quot;) print(f&quot;the reciprocal of {entry} is {r}&quot;) . The entry is b oops! invalid literal for int() with base 10: &#39;b&#39; occured. *********** The entry is 0 oops! division by zero occured. *********** The entry is 2 the reciprocal of 2 is 0.5 . ## SEPERATE EXCEPT BLOCK for each error lst = [&#39;b&#39;,0,2] for entry in lst: try: print(&quot;The entry is &quot;,entry) r = 1/int(entry) except(ValueError): print(&quot;value error occured&quot;) print(&quot;***********&quot;) except(ZeroDivisionError): print(&quot;ZeroDivisionError occured &quot;) print(&quot;***********&quot;) except: print(&quot;some other error&quot;) print(f&quot;the reciprocal of {entry} is {r}&quot;) . The entry is b value error occured *********** The entry is 0 ZeroDivisionError occured *********** The entry is 2 the reciprocal of 2 is 0.5 . In the above case the error has been raised by the interpreter. Programatically we can also raise our own error . try: num = int(input(&quot;Enter a positive number&quot;)) if num&lt;=0: raise ValueError(&quot;Error: Entered non positive number&quot;) except ValueError as e: print(e) . Enter a positive number-2 Error: Entered non positive number . Try , finally . ## finally is generally used to release external resources try: f = open(&#39;sample.txt&#39;,&#39;w&#39;) # perform file operation finally: ## this is executed no matter what f.close() . Python debugging . import pdb def seq(n): for i in range(n): pdb.set_trace() print(i) return seq(5) # c : continue # q : quit # list # p : print # p locals() # p globals() . &gt; &lt;ipython-input-42-899a349199be&gt;(6)seq() -&gt; print(i) (Pdb) p locals &lt;built-in function locals&gt; (Pdb) p locals() {&#39;n&#39;: 5, &#39;i&#39;: 0} (Pdb) p i 0 (Pdb) c 0 &gt; &lt;ipython-input-42-899a349199be&gt;(5)seq() -&gt; pdb.set_trace() (Pdb) p locals() {&#39;n&#39;: 5, &#39;i&#39;: 1} (Pdb) c 1 &gt; &lt;ipython-input-42-899a349199be&gt;(6)seq() -&gt; print(i) (Pdb) p locals() {&#39;n&#39;: 5, &#39;i&#39;: 2} (Pdb) q . BdbQuit Traceback (most recent call last) &lt;ipython-input-42-899a349199be&gt; in &lt;module&gt; 7 return 8 -&gt; 9 seq(5) 10 11 # c : continue &lt;ipython-input-42-899a349199be&gt; in seq(n) 4 for i in range(n): 5 pdb.set_trace() -&gt; 6 print(i) 7 return 8 &lt;ipython-input-42-899a349199be&gt; in seq(n) 4 for i in range(n): 5 pdb.set_trace() -&gt; 6 print(i) 7 return 8 ~/miniconda3/envs/myenv/lib/python3.8/bdb.py in trace_dispatch(self, frame, event, arg) 86 return # None 87 if event == &#39;line&#39;: &gt; 88 return self.dispatch_line(frame) 89 if event == &#39;call&#39;: 90 return self.dispatch_call(frame, arg) ~/miniconda3/envs/myenv/lib/python3.8/bdb.py in dispatch_line(self, frame) 111 if self.stop_here(frame) or self.break_here(frame): 112 self.user_line(frame) --&gt; 113 if self.quitting: raise BdbQuit 114 return self.trace_dispatch 115 BdbQuit: . Python Numpy . Python package for scientific computation. It is useful because it is memory-efficient hence provides fast numeric operations . import numpy as np a = np.array([0,1,2,3]) print(a) print(np.arange(10)) . [0 1 2 3] [0 1 2 3 4 5 6 7 8 9] . Python lists vs numpy array . # python lists L = range(1000) %timeit [i**2 for i in L] . 239 µs ± 11.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . a= np.arange(1000) %timeit a**2 . 1.25 µs ± 23.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each) . Wow !! numpy is almost 200 times faster than python list for a operation returning square of a 1000 numbers . # 1d array a= np.array([1,2,3,4]) a . array([1, 2, 3, 4]) . ## print dimension a.ndim . 1 . ## print shape a.shape . (4,) . ## 2D arrays d = np.array([[0,1,2],[4,5,6]]) d . array([[0, 1, 2], [4, 5, 6]]) . d.ndim . 2 . d.shape . (2, 3) . Functions for creating arrays . ## arange a= np.arange(10) a . array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . b= np.arange(1,10,2) # start,end,step b . array([1, 3, 5, 7, 9]) . # using linspace to create equal spaced points a = np.linspace(0,1,6) # start,end, number of points a . array([0. , 0.2, 0.4, 0.6, 0.8, 1. ]) . # all values of array are one a= np.ones((3,3)) # tuple required a . array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]]) . b = np.zeros((3,3)) #tuple requied b . array([[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]]) . # identity matrix c = np.eye(3,2) c . array([[1., 0.], [0., 1.], [0., 0.]]) . np.eye(3) . array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]) . ## creates diagonal array a = np.diag([1,2,3,4]) a . array([[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]) . ## random numbers a = np.random.rand(4) # uniform distribution between (0,1) a . array([0.87708686, 0.22073519, 0.17401011, 0.77206108]) . b = np.random.randn(4) # normal distribution with mean 0 and variance 1 b . array([ 0.68342879, 0.63458129, 1.67784901, -0.31346735]) . np.random.randn?? . Data types . a.dtype . dtype(&#39;float64&#39;) . a = np.arange(10) a . array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . a.dtype . dtype(&#39;int64&#39;) . np.arange(10, dtype=&quot;float64&quot;) . array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]) . ## complex datatypes d = np.array([1+2j, 2+4j]) d, d.dtype . (array([1.+2.j, 2.+4.j]), dtype(&#39;complex128&#39;)) . st =np.array([&#39;ab&#39;,&#39;cd&#39;,&#39;dg&#39;]) st . array([&#39;ab&#39;, &#39;cd&#39;, &#39;dg&#39;], dtype=&#39;&lt;U2&#39;) . Slicing . a = np.arange(10) a . array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . a[1:8] . array([1, 2, 3, 4, 5, 6, 7]) . a[1:8:2] . array([1, 3, 5, 7]) . a = np.arange(10) print(a) a[5:] = 10 a . [0 1 2 3 4 5 6 7 8 9] . array([ 0, 1, 2, 3, 4, 10, 10, 10, 10, 10]) . b= np.arange(5) a[5:] = b[::-1] a . array([0, 1, 2, 3, 4, 4, 3, 2, 1, 0]) . # Matrix multiplication c = np.diag([1,2,3,4]) print(c*c) print(c.dot(c)) # both are same . [[ 1 0 0 0] [ 0 4 0 0] [ 0 0 9 0] [ 0 0 0 16]] [[ 1 0 0 0] [ 0 4 0 0] [ 0 0 9 0] [ 0 0 0 16]] . # element wise comparison a = np.array([1,2,3,4]) b = np.array ([5,6,7,0]) a &gt; b . array([False, False, False, True]) . # COMPUTING SUM x = np.array([1,2,3,4]) np.sum(x) . 10 . # sum by column and row x = np.array([[1,2],[4,5]]) x . array([[1, 2], [4, 5]]) . x.sum(axis=0) #columns (first dimension) . array([5, 7]) . x.sum(axis=1) #row (2nd dimension) . array([3, 9]) . Logical operations . # logical AND np.all([True, True, False]) . False . # logical OR np.any([True, True, False]) . True . a = np.array([1,2,3,2]) b = np.array([2,2,3,2]) c= np.array([6,4,4,5]) ((a &lt;=b) &amp; (b&lt;=c)).all() . True . Statistics . x= np.array([1,2,3,1]) x.mean() . 1.75 . np.median(x) . 1.5 . y = np.array([[1,2,3],[5,6,1]]) np.median(y) . 2.5 . np.median(y, axis=-1) # last axis i.e row . array([2., 5.]) . Broadcasting in Numpy . Basic operations in numpy array (addition, multiplication) are elementwise . This works on array of same size. But also it&#39;s possible to operations on the arrays of different sizes if Numpy can transform these arrays so that they all have the same size. This conversion is called Broadcasting. Image example(to be added later) . a= np.tile(np.arange(0,40,10), (3,1)) # replicates the array 3times in the row a . array([[ 0, 10, 20, 30], [ 0, 10, 20, 30], [ 0, 10, 20, 30]]) . # another example a= np.tile(np.arange(0,40,10), (3,2)) a . array([[ 0, 10, 20, 30, 0, 10, 20, 30], [ 0, 10, 20, 30, 0, 10, 20, 30], [ 0, 10, 20, 30, 0, 10, 20, 30]]) . ## 2nd case a = np.tile(np.arange(0,40,10),(3,1)) a= a.T b= np.array([0,1,2]) a . array([[ 0, 0, 0], [10, 10, 10], [20, 20, 20], [30, 30, 30]]) . ## 2nd case a+b . array([[ 0, 1, 2], [10, 11, 12], [20, 21, 22], [30, 31, 32]]) . a = np.arange(0,40,10) a.shape . (4,) . a.T ## this is same as a since a is 1D . array([ 0, 10, 20, 30]) . # convert to 2d array a= a[:, np.newaxis] a.shape . (4, 1) . a . array([[ 0], [10], [20], [30]]) . # case 3 broadcasting a+b . array([[ 0, 1, 2], [10, 11, 12], [20, 21, 22], [30, 31, 32]]) . Array Shape Manipulation . Flattening . It converts 2D arrays to 1D. It does so row wise . a = np.array([[1,2,3],[4,5,6]]) a.ravel() # converts 2D to 1D . array([1, 2, 3, 4, 5, 6]) . a.T . array([[1, 4], [2, 5], [3, 6]]) . a.T.ravel() . array([1, 4, 2, 5, 3, 6]) . b=a.ravel() b . array([1, 2, 3, 4, 5, 6]) . b= b.reshape((2,3)) . b . array([[1, 2, 3], [4, 5, 6]]) . Interestingly if we change the value of b it also changes the value of a. As numpy tries to optimize space . b[0,0] = 50 a . array([[50, 2, 3], [ 4, 5, 6]]) . . Warning: Be careful reshape may also return a copy . ## example a = np.zeros((3,2)) b = a.T.reshape(3*2) b[0] = 50 a . array([[0., 0.], [0., 0.], [0., 0.]]) . b . array([50., 0., 0., 0., 0., 0.]) . Adding a dimension . z= np.array([1,2,3]) z . array([1, 2, 3]) . z[:,np.newaxis] . array([[1], [2], [3]]) . DImension Shuffling . a = np.arange(4*3*2).reshape(4,3,2) # 4 matrices of size 3*2 a.shape . (4, 3, 2) . a . array([[[ 0, 1], [ 2, 3], [ 4, 5]], [[ 6, 7], [ 8, 9], [10, 11]], [[12, 13], [14, 15], [16, 17]], [[18, 19], [20, 21], [22, 23]]]) . Resize . a = np.arange(4) a.resize(8,) a . array([0, 1, 2, 3, 0, 0, 0, 0]) . # now if b is referenced to a b=a # then resizing throws error since there are 2variable pointing towards the same array a.resize((4,)) . ValueError Traceback (most recent call last) &lt;ipython-input-94-4afc16d48154&gt; in &lt;module&gt; 3 b=a 4 # then resizing throws error since there are 2variable pointing towards the same array -&gt; 5 a.resize((4,)) ValueError: cannot resize an array that references or is referenced by another array in this way. Use the np.resize function or refcheck=False . Sorting array . a= np.array([[5,4,6],[2,3,2]]) b = np.sort(a, axis=1) b . array([[4, 5, 6], [2, 2, 3]]) . # in-place sort a.sort(axis=1) a . array([[4, 5, 6], [2, 2, 3]]) . # sorting with fancy indexing a= np.array([4,3,1,2]) j = np.argsort(a) j . array([2, 3, 1, 0]) . import matplotlib.pyplot as plt . plt.plot([2,4,6,4]) plt.ylabel(&quot;Numbers&quot;) # if no x-axis values are give then by default the indices becomes the x values plt.xlabel(&quot;index&quot;) plt.title(&quot;myplot&quot;) plt.show() . plt.plot([1,2,3,4],[1,4,9,16]) plt.xlabel(&quot;squares&quot;) plt.ylabel(&quot;numbers&quot;) plt.grid() plt.show() . plt.plot([1,2,3,4],[1,4,9,16],&quot;ro&quot;) plt.xlabel(&quot;squares&quot;) plt.ylabel(&quot;numbers&quot;) plt.grid() plt.show() . import numpy as np t = np.arange(0.,5.,0.2) plt.plot(t, t**2, &#39;b--&#39;, label=&#39;^2&#39;) #blue dash plt.plot(t, t**2.2, &#39;ro&#39;, label=&#39;^2.2&#39;) #red dot plt.plot(t, t**2.5, &#39;g^&#39;, label=&#39;^2.5&#39;) # green traingles plt.grid() plt.legend() #line labels plt.show() . Controlling line properties . x = [1,2,3,4] y= [1,4,9,16] plt.plot(x,y,linewidth=5.0) plt.show() . x1 = [1,2,3,4] y1 = [1,4,9,16] y2 = [2,4,6,8] lines= plt.plot(x1,y1,x1,y2) plt.setp(lines[0],color=&#39;r&#39;, linewidth=2.0) plt.setp(lines[1],color=&#39;g&#39;, linewidth=2.5) . [None, None] . Working with multiple figures and axis . def f(t): return np.exp(t)*np.cos(2*np.pi*t) t1= np.arange(0.0,5.0,0.1) t2 = np.arange(0.0,0.5,0.02) plt.figure(1) # first figure plt.subplot(211) # first subplot in first figure plt.grid() plt.plot(t1, f(t1), &#39;b-&#39;) plt.subplot(212) # 2nd subplot in first figure plt.plot(t2,np.cos(2*np.pi*t2), &#39;r--&#39;) plt.show() . Pandas . Pandas is a python package that helps us does efficient operation on data which are stored in a table format . read file | dataframe basics max , describe | save csv | Groupby | Concate dataframe | Numerical indexing | Creating dataframe from files . Lets create csv file . Create a file named weather.csv and fill it with the following. Warning!! the space sensitive so be careful not to include space at the end of each line . date,temperature,windspead,event 1/1/2020,32,6,Rain 1/2/2020,35,7,Sunny 1/3/2020,28,2,Snow 1/4/2020,24,7,Snow 1/5/2020,32,4,Rain 1/6/2020,31,2,Sunny . import pandas as pd df= pd.read_csv(&quot;weather.csv&quot;) df . date temperature windspead event . 0 1/1/2020 | 32 | 6 | Rain | . 1 1/2/2020 | 35 | 7 | Sunny | . 2 1/3/2020 | 28 | 2 | Snow | . 3 1/4/2020 | 24 | 7 | Snow | . 4 1/5/2020 | 32 | 4 | Rain | . 5 1/6/2020 | 31 | 2 | Sunny | . Creating dataframe from tuples . weather_data = [(&#39;1/1/2020&#39;,32,6,&#39;Rain&#39;), (&#39;1/2/2020&#39;,35,7,&#39;Sunny&#39;), (&#39;1/3/2020&#39;,28,2,&#39;Snow&#39;), (&#39;1/4/2020&#39;,24,7,&#39;Snow&#39;), (&#39;1/5/2020&#39;,32,4,&#39;Rain&#39;), (&#39;1/6/2020&#39;,31,2,&#39;Sunny&#39;)] df1 = pd.DataFrame(weather_data, columns=[&#39;day&#39;,&#39;temperature&#39;, &#39;windspeed&#39;, &#39;event&#39;]) df1 . day temperature windspeed event . 0 1/1/2020 | 32 | 6 | Rain | . 1 1/2/2020 | 35 | 7 | Sunny | . 2 1/3/2020 | 28 | 2 | Snow | . 3 1/4/2020 | 24 | 7 | Snow | . 4 1/5/2020 | 32 | 4 | Rain | . 5 1/6/2020 | 31 | 2 | Sunny | . df.shape . (6, 4) . df.head() # first few rows . date temperature windspead event . 0 1/1/2020 | 32 | 6 | Rain | . 1 1/2/2020 | 35 | 7 | Sunny | . 2 1/3/2020 | 28 | 2 | Snow | . 3 1/4/2020 | 24 | 7 | Snow | . 4 1/5/2020 | 32 | 4 | Rain | . df.tail() # last few rows . date temperature windspead event . 1 1/2/2020 | 35 | 7 | Sunny | . 2 1/3/2020 | 28 | 2 | Snow | . 3 1/4/2020 | 24 | 7 | Snow | . 4 1/5/2020 | 32 | 4 | Rain | . 5 1/6/2020 | 31 | 2 | Sunny | . df.columns . Index([&#39;date&#39;, &#39;temperature&#39;, &#39;windspead&#39;, &#39;event&#39;], dtype=&#39;object&#39;) . df[[&#39;date&#39;,&#39;event&#39;]] . date event . 0 1/1/2020 | Rain | . 1 1/2/2020 | Sunny | . 2 1/3/2020 | Snow | . 3 1/4/2020 | Snow | . 4 1/5/2020 | Rain | . 5 1/6/2020 | Sunny | . df[&#39;temperature&#39;].max() . 35 . df[&#39;temperature&#39;].describe() . count 6.000000 mean 30.333333 std 3.829708 min 24.000000 25% 28.750000 50% 31.500000 75% 32.000000 max 35.000000 Name: temperature, dtype: float64 . # select row which has the maximum temperature. df[df[&#39;temperature&#39;]== df[&#39;temperature&#39;].max()] . date temperature windspead event . 1 1/2/2020 | 35 | 7 | Sunny | . # return a particular column in the matching rows df.date[df[&#39;temperature&#39;]== df[&#39;temperature&#39;].max()] . 1 1/2/2020 Name: date, dtype: object . Save csv . df.to_csv(&quot;new.csv&quot;) ## save the index too # read the saved csv df1= pd.read_csv(&quot;new.csv&quot;) df1 . Unnamed: 0 date temperature windspead event . 0 0 | 1/1/2020 | 32 | 6 | Rain | . 1 1 | 1/2/2020 | 35 | 7 | Sunny | . 2 2 | 1/3/2020 | 28 | 2 | Snow | . 3 3 | 1/4/2020 | 24 | 7 | Snow | . 4 4 | 1/5/2020 | 32 | 4 | Rain | . 5 5 | 1/6/2020 | 31 | 2 | Sunny | . df.to_csv(&quot;noindex.csv&quot;,index=False) # index is not saved df2= pd.read_csv(&quot;noindex.csv&quot;) df2 . date temperature windspead event . 0 1/1/2020 | 32 | 6 | Rain | . 1 1/2/2020 | 35 | 7 | Sunny | . 2 1/3/2020 | 28 | 2 | Snow | . 3 1/4/2020 | 24 | 7 | Snow | . 4 1/5/2020 | 32 | 4 | Rain | . 5 1/6/2020 | 31 | 2 | Sunny | . Group-By . g= df.groupby(&#39;event&#39;) . g.get_group(&quot;Rain&quot;) . date temperature windspead event . 0 1/1/2020 | 32 | 6 | Rain | . 4 1/5/2020 | 32 | 4 | Rain | . g.max() . date temperature windspead . event . Rain 1/5/2020 | 32 | 6 | . Snow 1/4/2020 | 28 | 7 | . Sunny 1/6/2020 | 35 | 7 | . g.mean() . temperature windspead . event . Rain 32.0 | 5.0 | . Snow 26.0 | 4.5 | . Sunny 33.0 | 4.5 | . g.describe() . temperature windspead . count mean std min 25% 50% 75% max count mean std min 25% 50% 75% max . event . Rain 2.0 | 32.0 | 0.000000 | 32.0 | 32.0 | 32.0 | 32.0 | 32.0 | 2.0 | 5.0 | 1.414214 | 4.0 | 4.50 | 5.0 | 5.50 | 6.0 | . Snow 2.0 | 26.0 | 2.828427 | 24.0 | 25.0 | 26.0 | 27.0 | 28.0 | 2.0 | 4.5 | 3.535534 | 2.0 | 3.25 | 4.5 | 5.75 | 7.0 | . Sunny 2.0 | 33.0 | 2.828427 | 31.0 | 32.0 | 33.0 | 34.0 | 35.0 | 2.0 | 4.5 | 3.535534 | 2.0 | 3.25 | 4.5 | 5.75 | 7.0 | . Concatenate Data Frames . india_weather = pd.DataFrame({ &quot;city&quot; : [&#39;mumbai&#39;, &#39;delhi&#39;, &#39;bangalore&#39;], &quot;temperature&quot;:[32, 45, 30], &quot;humidity&quot;:[80,60,78] }) india_weather . city temperature humidity . 0 mumbai | 32 | 80 | . 1 delhi | 45 | 60 | . 2 bangalore | 30 | 78 | . us_weather = pd.DataFrame({ &quot;city&quot; : [&#39;new york&#39;, &#39;pittsburg&#39;, &#39;chicago&#39;], &quot;temperature&quot;:[21,14,35], &quot;humidity&quot;:[68,65,75] }) us_weather . city temperature humidity . 0 new york | 21 | 68 | . 1 pittsburg | 14 | 65 | . 2 chicago | 35 | 75 | . ## concate 2 dataframes df = pd.concat([india_weather, us_weather]) #common columns df . city temperature humidity . 0 mumbai | 32 | 80 | . 1 delhi | 45 | 60 | . 2 bangalore | 30 | 78 | . 0 new york | 21 | 68 | . 1 pittsburg | 14 | 65 | . 2 chicago | 35 | 75 | . # for continuous index df = pd.concat([india_weather, us_weather], ignore_index=True) df . city temperature humidity . 0 mumbai | 32 | 80 | . 1 delhi | 45 | 60 | . 2 bangalore | 30 | 78 | . 3 new york | 21 | 68 | . 4 pittsburg | 14 | 65 | . 5 chicago | 35 | 75 | . df = pd.concat([india_weather, us_weather], axis=1) . df . city temperature humidity city temperature humidity . 0 mumbai | 32 | 80 | new york | 21 | 68 | . 1 delhi | 45 | 60 | pittsburg | 14 | 65 | . 2 bangalore | 30 | 78 | chicago | 35 | 75 | . Merging Dataframes . temperature_df = pd.DataFrame({ &quot;city&quot;: [&#39;mumbai&#39;, &#39;delhi&#39;, &#39;bangalore&#39;, &#39;hyderabad&#39;], &quot;temperature&quot;:[35,45,30,40], }) temperature_df . city temperature . 0 mumbai | 35 | . 1 delhi | 45 | . 2 bangalore | 30 | . 3 hyderabad | 40 | . humidity_df = pd.DataFrame({ &quot;city&quot;:[&quot;mumbai&quot;, &quot;delhi&quot;, &quot;bangalore&quot;], &quot;humidity&quot;:[68,65,75] }) humidity_df . city humidity . 0 mumbai | 68 | . 1 delhi | 65 | . 2 bangalore | 75 | . ## merge 2 dataframes df = pd.merge(temperature_df, humidity_df, on=&quot;city&quot;) # it drops hyderabad df . city temperature humidity . 0 mumbai | 35 | 68 | . 1 delhi | 45 | 65 | . 2 bangalore | 30 | 75 | . ## OUTER-Join df1 = pd.merge(temperature_df, humidity_df, on=&quot;city&quot;, how=&#39;outer&#39;) df1 . city temperature humidity . 0 mumbai | 35 | 68.0 | . 1 delhi | 45 | 65.0 | . 2 bangalore | 30 | 75.0 | . 3 hyderabad | 40 | NaN | . Numerial Indexing . Fetches value at a particular position . df = pd.DataFrame([1,2,3,4,5],index=[50,49,48,47,46]) df . 0 . 50 1 | . 49 2 | . 48 3 | . 47 4 | . 46 5 | . df.loc[49] # uses index . 0 2 Name: 49, dtype: int64 . df.loc[:47] . 0 . 50 1 | . 49 2 | . 48 3 | . 47 4 | .",
            "url": "https://sandipan1.github.io/mywebsite/2020/05/25/python-basics.html",
            "relUrl": "/2020/05/25/python-basics.html",
            "date": " • May 25, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sandipan1.github.io/mywebsite/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sandipan1.github.io/mywebsite/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sandipan1.github.io/mywebsite/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}